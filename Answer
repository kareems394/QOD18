#include <iostream>
#include <vector>
#include <set>
using namespace std;

int main() {
    int length = 9;
    set<int> distinct_colors; // Set to store unique colors without repition
    distinct_colors.insert(0); // Put white as the first color
    vector<pair<int, int>> queries = {{1, 2}, {1, 3}, {3, 6}, {2, 3}, {2, 6}};
    vector<int> result;
    vector<int> axis(length, 0); // To make all the axis values take the white color encoded with zero
    vector<int> colorCount(length, 0);
    
    for (int i = 0; i < queries.size(); i++) {
        int x_i = queries[i].first;
        int c = queries[i].second;
        
        if (axis[x_i] != 0) { // If the coordinate is already colored
            int prevColor = axis[x_i];
            colorCount[prevColor]--; // Decrease the count of the previous color
            if (colorCount[prevColor] == 0) {
                distinct_colors.erase(prevColor); // Remove the previous color from the set
            }
        }

        axis[x_i] = c; // Update the color at coordinate x
        colorCount[c]++; // Increase the count of the new color
        distinct_colors.insert(c); // Add the new color to the set
        
        result.push_back(distinct_colors.size());
    }

    cout << "Output: [";
    for (int i : result) {
        cout  <<i << ",";
    }
    cout <<"]";
    cout << endl;

    return 0;
}

/*Time Analysis:
the loop iterates n times where n is the number of queries entered; 
however within each iteration the erase and insert functions of the set takes log(k),
where k is the number of the distinct_colors in the set so far.
so OVERALL: the total time taked should be O(nlogk);*/ 

